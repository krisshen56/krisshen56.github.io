---
layout: post
title:  "Notes on The Rust Programming Language"
date:   2023-04-30 18:00:00 +0800
categories: rust
---
### [Chapter 3] Common Programming Concepts

#### [3.1] Variables and Mutability
1. 在Rust中, variables預設是immutable
```rust
    let x = 5;     // immutable
    let mut x = 5; // mutable
```
2. const永遠都是immutable, 須指定型別且只能用const expression
(compile time evaluation)對其賦值
```rust
    // note the naming rule of const
    const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;
```
3. Varible shadowing: 重新使用let宣告一個同名的variable, 型別可以改變,
會遮蔽之前同名的variable直至scope結束
```rust
    let spaces = "   ";
    let spaces = spaces.len();
```

#### [3.2] Data Types
1. Rust的scalar types:
   - integer type: i8, u8, i32, u32, ..., 比較特別的是isize和usize(和arch type有關)
   - float type: f32, f64, 預設是f64
   - boolean(one byte): true, false
   - char(4 bytes): 可以表示unicode scalar value
```rust
    let z: char = 'ℤ';
```
2. Integer literals:
   - 57u8(with type suffix)
   - 98_222(decimal with visual separator)
   - 0xff(hex)
   - 0b1111_0000(binary)
   - b'A'(u8 only)
3. Rust的compound types:
   - tuple
```rust
    // 等同於let tup: (i32, f64, u8) = (500, 6.4, 1);
    let tup = (500, 6.4, 1);
    // tuple supports destructuring
    // so x = 500, y = 6.4, z = 1
    let (x, y, z) = tup;
    // access tuple element: x.0, x.1, ...
    let five_hundred = x.0;
    let six_point_four = x.1;
    let one = x.2;
```
   - array: allocated on stack, not heap
```rust
    let a: [i32, 5] = {1, 2, 3, 4, 5}
    let a = {1, 2, 3, 4, 5}
    let a = [3; 5] // 等同於[3, 3, 3, 3, 3]
```

4. unit(空的tuple): 其值和型別都是`()`

#### [3.3] Functions
1. Rust使用snake case為function和variable的naming convention
2. function定義的位置在caller的前後皆可, 只與caller可以看見的scope有關
3. statement和expression的差別在於expression有回傳值, 所以
expression可以放在function的最後一行當做回傳值
4. calling function或macro屬於expression, 一個以`{}`包含的block也是expression
```rust
    fn main() {
        let x = plus_one(5);

        println!("The value of x is: {x}");
    }

    fn plus_one(x: i32) -> i32 {
        x + 1
    }
```

#### [3.4] Comments
1. Rust慣用單行註解, 且通常出現在要說明的程式碼上方

#### [3.5] Control Flow
1. Rust的condition operands必須是bool, 其他type無法implicitly轉型成bool
2. 因為if是expression, 所以可以在let statement中使用if expression賦值
```rust
    let condition = true;
    let number = if condition { 5 } else { 6 };
```

3. loop中可以使用break expression回傳值
```rust
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };
```

4. 當有多層loop時, 可以使用loop label來指定要break/continue的loop
```rust
    let mut count = 0;
    'counting_up: loop {
        println!("count = {count}");
        let mut remaining = 10;

        loop {
            println!("remaining = {remaining}");
            if remaining == 9 {
                break;
            }
            if count == 2 {
                break 'counting_up;
            }
            remaining -= 1;
        }

        count += 1;
    }
```

6. 使用range指定for loop的次數
```rust
    // output is:
    // 3!
    // 2!
    // 1!
    for number in (1..4).rev() {
        println!("{number}!");
    }
```

---

### [Chapter 4] Understanding Ownership
Rust的memory safety是透過ownership機制而非使用garbage collector達成

#### [4.1] What Is Ownership?
1. stack和heap的比較:

    |           |          Stack           |              Heap            |
    |-----------|:------------------------:|:----------------------------:|
    | Data size | fixed,                   | dynamic,                     |
    |           | known at compile time    | unknown at compile time      |
    | Speed     | fast                     | slow(due to pointer deref)   |

2. ownership rule:
   - Each value in Rust has an owner
   - There can only be one owner at a time.
   - When the owner goes out of scope, the value will be dropped.
3. `String`是可以動態調整大小的型別, 可以透過`String::from`從string literals建立
4. 要真正複製一個`String`的內容, 可以使用`clone()` method
5. 如果一個type或其部份有實做`Drop` trait, Rust是禁止其聲明為`Copy`, 也就是說Copy trait
和Drop trait是互相衝突的
6. 實作Copy trait的types:
   - All the integer types, such as u32.
   - The Boolean type, bool, with values true and false.
   - All the floating-point types, such as f64.
   - The character type, char.
   - Tuples, if they only contain types that also implement Copy.
7. 對沒有實作`Copy` trait的型別, variables assignment及functions的parameters passing和return values
都會發生ownership的轉移

#### [4.2] References and Borrowing
1. reference: 和pointer一樣, 透過儲存的address來存取non owned data, 只是保證在reference的lifetime
期間, 所指向的data都是valid的, 不會有dangling reference問題
2. borrowing: the action of creating a reference(&T or &mut T)
3. data race發生的原因:
   - Two or more pointers access the same data at the same time.
   - At least one of the pointers is being used to write to the data.
   - There’s no mechanism being used to synchronize access to the data.
4. Rust透過同一時間只能有一個mutable reference或多個immutable references的方式在compile time
避免data race的產生

#### [4.3] The Slice Type
1. string slice(型別是`&str`): a reference to part of a `String`
```rust
    let s = String::from("hello world");

    let hello = &s[0..5];
    let world = &s[6..11];
    let len = s.len();
    let slice = &s[0..len];
    // range前後省略等同於上面的寫法
    let slice = &s[..];
```
2. string literal is an immutable string slice
3. function參數型別選擇`&str`優於`&String`的好處是, 可以接收
   - String slice
   - String reference
   - slice of string literals
   - string literals
4. slice的內容就是有一個ptr指向第一個element, 以及slice所包含的elements大小
```rust
    let a = [1, 2, 3, 4, 5];
    // the type is &[i32]
    let slice = &a[1..3];
```

---

### [Chapter 5] Using Structs to Structure Related Data

#### [5.1] Defining and Instantiating Structs
1. struct是由fields組成:
```rust
    struct User {
        active: bool,
        username: String,
        email: String,
        sign_in_count: u64,
    }
```
2. 實體化struct時, fields的順序可以不用和宣告時一致:
```rust
    let user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };
```
3. 初始化field的變數名稱和field name一樣時可以使用field init shorthand:
```rust
    fn build_user(email: String, username: String) -> User {
        User {
            active: true,
            username,           // 等同於username: username
            email,              // 等同於email: email
            sign_in_count: 1,
        }
    }
```
4. 用另一個實體初始化struct可以使用struct update syntax
```rust
    let user2 = User {
        email: String::from("another@example.com"),
        // 等同於
        // active: user1.active,
        // username: user1.username,
        // sign_in_count: user1.sign_in_count,
        ..user1
    };
    // Note: user1.username is moved into user2
```
5. tuple struct: a named tuple
```rust
    // Color and Point are different types even they have the same tuple types
    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);
```
6. unit-like struct: for implementing traits on type without data
```rust
    struct AlwaysEqual;
```

#### [5.2] An Example Program Using Structs
1. 在struct宣告前加上`#[derive(Debug)]`就可以在`println!` macro中使用`{:?}`或`{:#?}`打印struct的內容
2. 利用`dbg!` macro在standard error打印expression的內容, 且同時輸出檔名和行號 \\
   要注意的是`dbg!`接收的expression參數會發生ownership轉移, 但會回傳此owned expression給caller

#### [5.3] Method Syntax
1. method是定義在struct, enum, trait的context中的function, 其第一個參數是 \\
   `self`, `&self`, `&mut self`
```rust
    struct Rectangle {
        width: u32,
        height: u32,
    }

    impl Rectangle {
        fn area(&self) -> u32 {
            self.width * self.height
        }
    }
```
2. impl block對特定type實作methods, `Self`是此type的alias \\
   `&self`則是`self: &Self`的alias
3. automatic referencing and dereferencing: \\
   利用object.something()呼叫method時, Rust會根據method的signature自動對object加上&, &mut, 或\*以完成method的呼叫
4. 定義在impl block的functions稱為與某一type關聯的associate functions(包含methods和像`String::from`的functions)
5. 因為traits的實作, associate functions可以分散在多個multiple impl blocks, 但都屬於同一個type的context

---

### [Chapter 6] Enums and Pattern Matching

#### [6.1] Defining an Enum
1. enum type的定義及使用:
```rust
    enum IpAddrKind {
        V4,
        V6,
    }
    fn route(ip_kind: IpAddrKind) {}
    route(IpAddrKind::V4);
```
2. enum可以embed相關的data, data的type沒有限制
```rust
    enum Message {
        Quit,                       // no data
        Move { x: i32, y: i32 },    // named fields, like a struct
        Write(String),              // String
        ChangeColor(i32, i32, i32), // tuple
    }
```
3. 最常使用的enum: `Option<T>`
```rust
    enum Option<T> {
        None,
        Some(T),
    }
```

#### [6.2] The match Control Flow Construct
1. match arm間使用逗號分開, 格式是`pattern => expression`, 多行code組成的`{}`expression逗號常省略 \\
   match arm可以用variable取得matched pattern的內容
```rust
    #[derive(Debug)] // so we can inspect the state in a minute
    enum UsState {
        Alabama,
        Alaska,
        // --snip--
    }

    enum Coin {
        Penny,
        Nickel,
        Dime,
        Quarter(UsState),
    }

    fn value_in_cents(coin: Coin) -> u8 {
        match coin {
            Coin::Quarter(state) => {
                println!("State quarter from {:?}!", state);
                25
            }
            Coin::Penny => 1,
            Coin::Nickel => 5,
            Coin::Dime => 10,
        }
    }
```
2. match必須列舉所有可能的patterns, 可以使用variable或`_`當做最後的catch all pattern
```rust
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        other => move_player(other), // 或是 _ => reroll(),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
    fn move_player(num_spaces: u8) {}
    fn reroll() {}
```

#### [6.3] Concise Control Flow with if let
1. 只對特定pattern做處理可以用`if let`來簡化match
```rust
    let mut count = 0;
    if let Coin::Quarter(state) = coin {
        println!("State quarter from {:?}!", state);
    } else {
        count += 1;
    }
```

---

### [Chapter 7] Managing Growing Projects with Packages, Crates, and Modules
Rust的module system包含: packages, crates, modules and use, paths

#### [7.1] Packages and Crates
1. crate: Rust編譯器處理的最小單位, 即使是單一個程式碼檔案也是一個crate.
2. crate可以分為二種:
    - binary crate: 有定義main function
    - library crate: 沒有main function. crate這名稱通常都是指library crate, 等同於一般的library概念
3. package: 由多個crates組合而成(cargo.toml描述了如何建置這些crates),
可以有多個binary crates和最多一個library crate.
4. crate root: Rust從這個檔案開始建置特定的crate
5. package layout(可以參考The Cargo Book的[Package Layout]一節):
    - binary crate root(crate name同package name): src/main.rs
    - library crate root(crate name同package name): src/lib.rs
    - 其他binary crates則是放在src/bin底下, 每個檔案就是一個crate

[Package Layout]: https://doc.rust-lang.org/cargo/guide/project-layout.html

#### [7.2] Defining Modules to Control Scope and Privacy
1. 編譯器建置crate是從crate root開始, 所以在crate建立module也是宣告在crate root file,
宣告的方式為`mod garden;`. module的實作編譯器會依順序在以下地方尋找(以garden module為例)
    - inline, 在crate root file中會有`mod garden` block
    - src/garden.rs
    - src/garden/mod.rs
2. 同樣地, submodule宣告在src/garden.rs, submodule的實作編譯器會依順序在以下地方尋找(以vegetables submodule為例)
    - inline, 在src/garden.rs中會有`mod vegetables` block
    - src/garden/vegetables.rs
    - src/garden/vegetables/mod.rs
3. module本身和其內部定義的names預設的access level都是private, 宣告時加上`pub`可以讓外部存取
4. crate root的implicit module name為crate, 所以如果有個type Asparagus定義在submodule vegetables,
其完整的path為`crate::garden::vegetables::Asparagus`. 通常會使用`use`來縮減較長的path
5. 如果不使用inline定義modules, module trees可以和module的source files在檔案系統的配置做對應

#### [7.3] Paths for Referring to an Item in the Module Tree
1. 存取module裡定義的item, 和檔案系統中利用file path存取檔案一樣, 可以透過module tree的path存取.
    - absolute path: path從crate root開始
    - relative path: path從當下的module開始, 利用`self`, `super`可以遍歷整個module tree

   兩種路徑各有其優缺點, 建議是使用絕對路徑以避免當下存取的code搬動時相對路徑也要跟著變動
2. module tree path和檔案系統的file path之間的對照:
    - `crate`相當於根目錄 */*
    - `super`相當於上層目錄 *..*
    - `self`相當於當前目錄 *.*
3. 在struct或enum前加上`pub`對其內部的fields影響不同:
    - struct: 只有struct name是public, 內部的fields仍是private, 除非fields前有加上`pub`
    - enum: 內部的fields都是public

#### [7.4] Bringing Paths into Scope with the use Keyword
1. 使用`use`在目前的scope建立shortcut就像在檔案系統中建立symbolic link一樣
2. 存取module定義的function, 通常建立的shortcut只到function的parent module, 目的是為了區分這個function
是當下module定義的還是其它module定義的. 如果是module定義的struct或enum, 建立的shortcut就會是完整的path,
除非是有同名的情況.
3. `use`可以和`as`一起使用建立alias name
4. `use`建立的shortcut name對外部module仍然是private, 如需export至外部module則須使用`pub use`
5. 許多`use` statements如果有共同path, 可以使用nested path的方式讓code更精簡
6. 和檔案系統的wildcard pattern一樣, `use` statement也支援glob operator

#### [7.5] Separating Modules into Different Files
1. src/garden/vegetables/mod.rs相較於src/garden/vegetables.rs是屬於舊式用法, 在同時編輯多個modules下會有檔名都是
mod.rs不易分辨的情況

---

## [Chapter 10] Generic Types, Traits, and Lifetimes
x, y都是`&i32`, x op y(op是relative operator == > <)不是比較address, 而是比較reference的值,
只有符合std::cmp::PartialOrd的type才支援

#### [10.1] Generic Data Types
1. generic可以用在function, struct, enum, \<\>要放在這些entity的名字之後
```rust
// function
fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> &T
// struct
struct Point<T, U> {
    x: T,
    y: U,
}
// enum
enum Result<T, E> {
    Ok(T),
    Err(E),
}
```

2. 對generic struct/enum實作method(XXX is the name of struct/enum's)
```rust
impl<T> XXX<T> {
}
```
也可以只對某種T提供method(類似C++的partial specialization)
```rust
impl XXX<f32>{
}
```
3. generic struct也可以有generic method
```rust
impl<X1, Y1> Point<X1, Y1> {
    fn mixup<X2, Y2>(self, other: Point<X2, Y2>) -> Point<X1, Y2> {
        ...
    }
}
```
4. monomorphization等於c++ template instantiation

#### [10.2] Traits: Defining Shared Behavior
1. trait定義了type須提供的methods, 類似其他語言的interface
```rust
pub trait Summary {
    fn summarize(&self) -> String;
}
```
2. implement trait for type
```rust
impl Summary for NewsArticle {
    ...
}
```
3. Orphan rule: 對type實做trait有一限制, trait或type必須至少有一個是定義在local crate,
二者都在external crate是不允許的
4. trait可以有default implementation, 要使用default implementation的type要在impl block提供empty block
```rust
pub trait Summary {
    // provide default implementation
    fn summarize(&self) -> String {
        String::from("(Read more...)")
    }
}
// use default implementation
impl Summary for NewsArticle {}
```
overriding default implementation的方式則是直接實做trait的methods(但是overriding
implementation無法呼叫default implementation)
5. 限定item只能是有實做Summary的type
```rust
pub fn notify(item: &impl Summary) {
    ...
}
```
等同於下面的trait bound語法
```rust
pub fn notify<T: Summary>(item: &T) {
    ...
}
```
6. 多個trait bounds要用+串接, 也可以在return type後, brace前使用where語句限定trait bounds
```rust
pub fn notify(item: &(impl Display + Summary)) {
pub fn notify<T: Display + Summary>(item: &T) {
pub fn notify<T>(item: &T) -> ()
        where T: Display + Summary, {
```
7. trait bound也可以限定return type, 但function內的所有回傳型別必須是唯一的
(否則須用trait object)
```rust
fn returns_summarizable() -> impl Summary {
    ...
}
```
8. trait bound可以限制符合條件的generic types才實做那些methods
```rust
impl<T: Display + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        ...
    }
}
```
9. blanket implmentation: 利用trait bound限定generic type實做trait
```rust
impl<T: Display> ToString for T {
    ...
}
```

### [10.3] Validating References with Lifetimes
1. life time annotation syntax
```rust
&'a i32
&'b mut i32
```
2. generic life time in function:
```rust
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str
```
'a會推斷為x, y參數重疊的lifetime區間, 但不會改變x, y實際的lifetime
3. struct定義如果有fields是reference, 也需要life time annotation, 確保struct的lifetime不超過fields的lifetime.
對這種struct實做methods時要在impl後加上\<'a\>
4. life time elision rules: compiler內建的patterns, 如果套用後reference沒有ambiguous lifetime,
就可以不用聲明life time annotation, 這個規則套用到fn definitions和impl blocks
    - Rule 1: (for input lifetimes)對每個reference parameter指定一個lifetime parameter
    - Rule 2: (for output lifetimes)如果只有一個input lifetime parameter,
那麼所有的output lifetime parameters(return values的lifetime)都等於此input lifetime parameter
    - Rule 3: (for output lifetimes)如果有多個input lifetime parameters, 且其中之一是&self或& mut self
那麼所有的output lifetime parameters都等於self的lifetime
5. static lifetime(life time as long as the program): 'static.
所有的string literals都是'static lifetime, 因為這些string literals存在於program binary中
6. lifetime annotation, generic type parameters和trait bounds的組合
```rust
fn longest_with_an_announcement<'a, T>(
    x: &'a str,
    y: &'a str,
    ann: T,
) -> &'a str
where
    T: Display, {
    ...
}
```

---

## [Chapter 11] Writing Automated Tests

### [11.1] How to Write Tests
1. test function和一般function的差別在於prototype前有`#[test]` attribute
聲明其是test function. test module也可以有一般function輔助test function
2. 使用cargo建立一個新的library會自動產生test module和test function,
可以做為template開發相關測試
3. test function內如果發生panic, 就會被test runner視為failed. `assert!`
macro的argument如果是false, 會呼叫`panic!` macro讓test failed.
4. `assert_eq!`和`assert_ne!` macro分別利用`==`, `!=`operators比較left argument
和right argument, 且assertion failure時會利用debug formatting印出argument值,
所以要比較的兩個值的type必須實作`PartialEq`和`Debug` traits.
通常都是在struct或enum前一行聲明`#[derive(PartialEq, Debug)]`即可
5. `assert!`, `assert_eq!`和`assert_ne!` macro在必要的argument後的argument都是
`format!` macro的argument, 可以用來客制化failed messages.
6. 如果要測試code有沒有在例外情況產生panic, 可以在test function前加上
`#[should_panic]` attribute, test runner的邏輯就會反過來.
7. 一般都是使用panic來測試failed的情況, 但test function也可以回傳`Result<T, E>`.
好處是可以使用`?` operator讓測試code直接回傳`Err`, 但此test function就不能聲明為
`#[should_panic]`

### [11.2] Controlling How Tests Are Run
1. 執行`cargo test`時command line options可以傳給cargo或是test binary. 兩者間的options用`--`分開
	```bash
	$ cargo test --help     # --help對象是cargo
	$ cargo test -- --help  # --help對象是test binary
	```
2. 預設是multi-threads同時執行多個tests, 可以使用`--test-threads`限制產生的threads數目.
	```bash
	$ cargo test -- --test-threads=1
	```
3. test function的stdout輸出預設只有failed test才會出現, passed test的stdout輸出會被Rust
test library截取, 可以使用`--show-output`強制打開
	```bash
	$ cargo test -- --show-output
	```
4. `cargo test`後面可以接test name的名稱filter要執行的tests, 要注意的是名稱的match可以是partial.
	```bash
	# 執行了tests::add_three_and_two和tests::add_two_and_two
	$ cargo test add
	```
5. 有些tests執行時間較長, 不希望這些tests在每次呼叫`cargo test`都執行, 可以在test
function前聲明`#[ignore]`
	```bash
	$ cargo test -- --ignored         # 只執行ignore test
	$ cargo test -- --include-ignored # 執行所有test
	```

### [11.3] Test Organization
1. Rust社群認為test可以分為二種:
	- unit test: 單個module內的test, 可以測試private API
	- integration test: 多個modules間的整合測試, 只能測試module的public API
2. unit test通常以tests submodule出現在要測試的code的檔案內, module前聲明
`#[cfg(test)]`表示只有在`cargo test`時才會編譯. 因為是submodule,
所以可以測試module的private API
3. integration test會放在project根目錄下的tests資料夾,
資料夾下每個檔案都是獨立的crate, 和之前src資料夾的module tree架構不一致.
如要建立submodule共享common code, 要使用舊式的mod.rs方式定義submodule
	```rust
	// the project root directory is adder

	// in src/lib.rs
	pub fn add_two(a: i32) -> i32 {
		a + 2
	}
	// in tests/common/mod.rs
	pub fn setup() {
		// setup code specific to your library's tests would go here
	}
	// in tests/integration_test.rs
	use adder;
	mod common; // common is submodule
	#[test]
	fn it_adds_two() {
		common::setup();
		assert_eq!(4, adder::add_two(2));
	}
	```
4. 只有binary crate的package無法做integration test, 因為binary
crate的function無法export至外部使用

---

## [Chapter 12] An I/O Project: Building a Command Line Program

### [12.1] Accepting Command Line Arguments
1. command line arguments iterator: `std::env::args()`
2. `collect()`需要annotate回傳的collection型別
```rust
let args_1: Vec<String> = env::args().collect();
// or using turbofish
let args_2 = env::args().collect::<Vec<i32>>();
```

### [12.2] Reading a File
1. 將檔案內容讀至String: `std::fs::read_to_string()`

### [12.3] Refactoring to Improve Modularity and Error Handling
1. Separation of concerns for binary projects:
   - main.rs: 只包含如何運行程式的邏輯
   - lib.rs: 提供程式運行的邏輯, 可以對每個功能撰寫測試
2. `Result<T, E>`的`unwrap_or_else(F)`method: `Ok`回傳T, `Err`執行closure F
3. `if let`的使用方式

### [12.4] Developing the Library’s Functionality with Test-Driven Development
1. Test-driven development(TDD): 一種軟體開發模式, 先撰寫功能測試再開始寫code實作
2. 字串裡backslash的作用是接著的換行字元不會成為字串的開頭
```rust
let contents = "\
Rust:
safe, fast, productive.
Pick three.";
```
3. `str`的`lines()`method回傳line-by-line的iterator

### [12.5] Working with Environment Variables
1. `str`的`to_lowercase()`method回傳型別是`String`
2. 存取環境變數: `std::env::var(key)`

### [12.6] Writing Error Messages to Standard Error Instead of Standard Output
1. `println!`輸出至standard output stream, `eprintln!`輸出至standard error stream

---

## [Chapter 13] Functional Language Features: Iterators and Closures
functional programming的形式:
- 把function當做參數傳入function
- function的回傳值為function
- 用變數儲存function

### [13.1] Closures: Anonymous Functions that Capture Their Environment
1. closures是anonymous functions, 可以儲存在變數或是直接當做參數傳遞給functions
2. closures可以capture定義closures區塊的變數, 根據capture的方式, closures自動實作了以下的traits
    - FnOnce: closures只能被呼叫一次, capture變數是採用move的方式
    - FnMut: closures可以被呼叫多次, capture變數是採用mutable reference的方式
    - Fn: closures可以被同時呼叫多次, capture變數是採用unmutable reference的方式或是沒有capture變數
3. FnOnce是FnMut的superset, FnMut是Fn的superset. 換句話說, 實作Fn的closures, 也自動實作了FnMut和FnOnce;
實作FnMute的closures, 也自動實作了FnOnce.
4. function和closure的語法比較:
```rust
fn  add_one_v1   (x: u32) -> u32 { x + 1 }
// closure with type annotations
let add_one_v2 = |x: u32| -> u32 { x + 1 };
let add_one_v3 = |x|             { x + 1 };
// only one expression, brackets are optional
let add_one_v4 = |x|               x + 1  ;
```
5. 如果closures定義沒有type annotations, 第一次呼叫時才會推導出參數和回傳值的型別,
之後的呼叫就會限定參數和回傳值的型別
```rust
let example_closure = |x| x;
// x is inferred as String
let s = example_closure(String::from("hello"));
// error, 5 is not a String
let n = example_closure(5);
```
6. 在closures的`||`前加`move` keyword, 可以強制變數是以capture by move的方式執行
7. 範例使用的二個method
    - FnOnce: `Option<T>`的`unwrap_or_else`
    - FnMut: `Vec<T>`的`sort_by_key`

### [13.2] Processing a Series of Items with Iterators
1. iterators在沒有呼叫consuming methods時(ex: `next()`或間接呼叫`next()`的consuming adaptors), 是沒有任何作用的
2. iterators實作`Iterator` trait, 至少需提供`Item` type和`next` method
```rust
pub trait Iterator {
    type Item;

    fn next(&mut self) -> Option<Self::Item>;

    // methods with default implementations elided
}
```
3. Iterator trait也提供了iterator adaptors(ex: `map`, `filter`)將原本的iterator轉變成另一種iterator
4. 從collection建立iterator的三種method: `into_iter()`, `iter()`, `iter_mut()`

### [13.3] Improving Our I/O Project
1. functional programming可以減少mutable state的數量並提供未來平行處理的可能

### [13.4] Comparing Performance: Loops vs. Iterators
1. iterators提供了high level的表達方式也能有low level具有的效能(zero-cost abstraction)

---

## [Chapter 15] Smart Pointers

### [15.1] Using Box\<T\> to Point to Data on the Heap
1. 使用Box的時機點:
   - compile time無法確定size的type可以藉由pointer封裝後鑲嵌在struct, 因為pointer的size是固定的
   - 大量資料的ownership移轉可以簡化成pointer的移轉
   - trait object
2. data allocation on heap: `Box::new()`
3. enum佔的空間大小由裡頭佔最大空間的元素決定
4. Box實做了Deref trait和Drop trait
   - Deref trait: 讓Box可以像reference一樣使用
   - Drop trait: 在Box deallocate時, clean up指向的heap data

### [15.2] Treating Smart Pointers Like Regular References with the Deref Trait
1. reference是一種形式的pointer, 利用dereference operator`*`可以存取reference指向的value
2. 實做Deref trait等同於實做dereference operator \*
```rust
struct MyBox<T>(T);
impl<T> Deref for MyBox<T> {
    // 須定義associated type
    type Target = T;
    // 須實做deref method
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
```
```rust
let x = 5;
let y = MyBox::new(x);
// *y會自動轉成*(y.deref())
assert_eq!(5, *y);
```
3. Deref coercion發生在functions or methods的reference arguments, arguments的type有實做Deref trait
```rust
fn hello(name: &str) {
    println!("Hello, {name}!");
}
let m = MyBox::new(String::from("Rust"));
// 用了二次Deref coercion
// &MyBox<String> => &String => &str
hello(&m);
```
4. 三種Deref coercion rules:
   - from `&T` to `&U` when `T: Deref<Target=U>`
   - from `&mut T` to `&mut U` when `T: DerefMut<Target=U>`
   - from `&mut T` to `&U` when `T: Deref<Target=U>`
5. 為什麼mutable reference可以coerce成immutable reference?

   根據borrowing rules, 只會有一個mutable reference存在, 所以轉成immutable reference不會違反borrowing rules;
但是反過來就不行, 因為你無法確定只有一個immutable reference

### [15.3] Running Code on Cleanup with the Drop Trait
1. 實做Drop trait等同於提供customized destructor
```rust
pub trait Drop {
    // Required method
    fn drop(&mut self);
}
```
2. 如果要在out of scope前使value釋放其管理的resources(ex. lock), 必須使用`std::mem::drop`,
因為drop method無法直接呼叫

### [15.4] Rc\<T\>, the Reference Counted Smart Pointer
1. `Rc<T>`: 具有reference count的smart pointer, 當strong reference count變成0時才會釋放data
2. `Rc<T>`的methods:
    - `clone`: 增加strong reference count
    - `strong_count`: 回傳目前的strong reference count
    - `weak_count`: 回傳目前的weak reference count

### [15.5] RefCell\<T\> and the Interior Mutability Pattern
1. interior mutability pattern: 透過immutable reference去修改reference到的data. 違反compile time
的borrow checking, 所以是利用runtime的borrow checking來達成.
2. smart pointers的比較:

    |                 |               Box\<T\>            |           Rc\<T\>         |          RefCell\<T\>        |
    |-----------------|:---------------------------------:|:-------------------------:|:----------------------------:|
    | Ownership       | single                            | multiple                  | single                       |
    | Borrow checking | immutable/mutable<br>compile time | immutable<br>compile time | immutable/mutable<br>runtime |
    | Multithreaded   | ?                                 | no                        | no                           |

3. `RefCell<T>`的methods:
    - `borrow`回傳`Ref<T>`
    - `borrow_mut`回傳`RefMut<T>`

### [15.6] Reference Cycles Can Leak Memory
1. Rust不保證不會有memory leak, 只保證memory safe
2. `Weak<T>`: 不具有ownership的weak reference
    - `Rc::downgrade`回傳`Weak<T>`
    - `Weak<T>`的method `upgrade`回傳`Option<Rc<T>>`, 如果是None表示該`Rc<T>`已消滅

---

## [Chapter 17] Object-Oriented Programming Features of Rust

### [17.1] Characteristics of Object-Oriented Languages
1. OOP的幾個面向:
   - objects = data + methods
     - Rust支援(`struct`和`enum`內含data, `impl`區塊對`struct`和`enum`提供methods)
   - encapsulation
     - Rust支援(pub關鍵字)
   - inheritance
     - Rust不支援
2. 使用inheritance的二個理由:
   - parent type實做了methods, child type可以直接使用或override
     - Rust提供的近似做法是default trait method implementation, default implementation也可以override
   - polymorphism: 可以在parent type出現的地方直接用child type取代
     - Rust提供的近似做法是trait objects

### [17.2] Using Trait Objects That Allow for Values of Different Types
1. 雖然enum可以用來儲存多種型別, 但這些型別已經在編譯時決定, 無法之後再擴充, 例如:
```rust
enum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}
```
   如果需要動態擴充型別, 須改用trait object
2. trait object包含了二個pointer資訊
   - 實作trait的型別實體
   - 用來查詢型別實作的trait methods的table
3. trait object: `Box<dyn T>`, `&dyn T`(`T` is the trait name), 例如:
```rust
pub trait Draw {
    fn draw(&self);
}
pub struct Screen {
    pub components: Vec<Box<dyn Draw>>,
}
```
3. static dispatch和dynamic dispatch的差別:
   - static dispatch for generics: 編譯時就根據呼叫時的concrete type直接產生non generic的function/method實作
   - dynamic dispatch for trait object: 編譯時無法決定要呼叫的method, 和static dispatch相比有效能損失

### [17.3] Implementing an Object-Oriented Design Pattern
1. state pattern: 一個value有多種states, 將每種state都用一個object表示, value的state轉換透過state object完成
2. `struct Post`的state field要用`Option`包裝的原因是state field在進行ownership的轉移時, Rust不允許struct field沒有值
(產生cannot move out of borrowed content的錯誤)
3. `trait State`的methods第一個參數不是常見的self, &self, &mut self, 而是`self: Box<Self>`, 限定了只有
Box包裝後的型別才可以呼叫這些methods
4. Rust可以透過trait object實現object-oriented design pattern的state pattern, 但是將state特性嵌入type的變形
state pattern更符合Rust的精神