---
layout: post
title:  "Notes on The Rust Programming Language"
date:   2023-04-30 18:00:00 +0800
categories: rust
---
### [Chapter 3] Common Programming Concepts

#### [3.1] Variables and Mutability
1. 在Rust中, variables預設是immutable
```
let x = 5;     // immutable
let mut x = 5; // mutable
```
2. const永遠都是immutable, 須指定型別且只能用const expression
(compile time evaluation)對其賦值
```
// note the naming rule of const
const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;
```
3. Varible shadowing: 重新使用let宣告一個同名的variable, 型別可以改變,
會遮蔽之前同名的variable直至scope結束
```
let spaces = "   ";
let spaces = spaces.len();
```

#### [3.2] Data Types
1. Rust的scalar types:
   - integer type: i8, u8, i32, u32, ..., 比較特別的是isize和usize(和arch type有關)
   - float type: f32, f64, 預設是f64
   - boolean(one byte): true, false
   - char(4 bytes): 可以表示unicode scalar value
```
let z: char = 'ℤ';
```
2. Integer literals:
   - 57u8(with type suffix)
   - 98_222(decimal with visual separator)
   - 0xff(hex)
   - 0b1111_0000(binary)
   - b'A'(u8 only)
3. Rust的compound types:
   - tuple
```
// 等同於let tup: (i32, f64, u8) = (500, 6.4, 1);
let tup = (500, 6.4, 1);
// tuple supports destructuring
// so x = 500, y = 6.4, z = 1
let (x, y, z) = tup;
// access tuple element: x.0, x.1, ...
let five_hundred = x.0;
let six_point_four = x.1;
let one = x.2;
```
   - array: allocated on stack, not heap
```
let a: [i32, 5] = {1, 2, 3, 4, 5}
let a = {1, 2, 3, 4, 5}
let a = [3; 5] // 等同於[3, 3, 3, 3, 3]
```

4. unit(空的tuple): 其值和型別都是`()`

---

### [Chapter 6] Enums and Pattern Matching

#### [6.1] Defining an Enum
1. enum definition and its usage
```rust
enum IpAddrKind {
    V4,
    V6,
}
fn route(ip_kind: IpAddrKind) {}
route(IpAddrKind::V4);
```
2. enum with associated data
```rust
enum IpAddr {
    V4(u8, u8, u8, u8),
    V6(String),
}
let home = IpAddr::V4(127, 0, 0, 1);
let loopback = IpAddr::V6(String::from("::1"));
```

---

## [Chapter 10] Generic Types, Traits, and Lifetimes
x, y都是`&i32`, x op y(op是relative operator == > <)不是比較address, 而是比較reference的值,
只有符合std::cmp::PartialOrd的type才支援

#### [10.1] Generic Data Types
1. generic可以用在function, struct, enum, \<\>要放在這些entity的名字之後
```rust
// function
fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> &T
// struct
struct Point<T, U> {
    x: T,
    y: U,
}
// enum
enum Result<T, E> {
    Ok(T),
    Err(E),
}
```

2. 對generic struct/enum實作method(XXX is the name of struct/enum's)
```rust
impl<T> XXX<T> {
}
```
也可以只對某種T提供method(類似C++的partial specialization)
```rust
impl XXX<f32>{
}
```
3. generic struct也可以有generic method
```rust
impl<X1, Y1> Point<X1, Y1> {
    fn mixup<X2, Y2>(self, other: Point<X2, Y2>) -> Point<X1, Y2> {
        ...
    }
}
```
4. monomorphization等於c++ template instantiation

#### [10.2] Traits: Defining Shared Behavior
1. trait定義了type須提供的methods, 類似其他語言的interface
```rust
pub trait Summary {
    fn summarize(&self) -> String;
}
```
2. implement trait for type
```rust
impl Summary for NewsArticle {
    ...
}
```
3. Orphan rule: 對type實做trait有一限制, trait或type必須至少有一個是定義在local crate,
二者都在external crate是不允許的
4. trait可以有default implementation, 要使用default implementation的type要在impl block提供empty block
```rust
pub trait Summary {
    // provide default implementation
    fn summarize(&self) -> String {
        String::from("(Read more...)")
    }
}
// use default implementation
impl Summary for NewsArticle {}
```
overriding default implementation的方式則是直接實做trait的methods(但是overriding
implementation無法呼叫default implementation)
5. 限定item只能是有實做Summary的type
```rust
pub fn notify(item: &impl Summary) {
    ...
}
```
等同於下面的trait bound語法
```rust
pub fn notify<T: Summary>(item: &T) {
    ...
}
```
6. 多個trait bounds要用+串接, 也可以在return type後, brace前使用where語句限定trait bounds
```rust
pub fn notify(item: &(impl Display + Summary)) {
pub fn notify<T: Display + Summary>(item: &T) {
pub fn notify<T>(item: &T) -> ()
        where T: Display + Summary, {
```
7. trait bound也可以限定return type, 但function內的所有回傳型別必須是唯一的
(否則須用trait object)
```rust
fn returns_summarizable() -> impl Summary {
    ...
}
```
8. trait bound可以限制符合條件的generic types才實做那些methods
```rust
impl<T: Display + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        ...
    }
}
```
9. blanket implmentation: 利用trait bound限定generic type實做trait
```rust
impl<T: Display> ToString for T {
    ...
}
```

### [10.3] Validating References with Lifetimes
1. life time annotation syntax
```rust
&'a i32
&'b mut i32
```
2. generic life time in function:
```rust
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str
```
'a會推斷為x, y參數重疊的lifetime區間, 但不會改變x, y實際的lifetime
3. struct定義如果有fields是reference, 也需要life time annotation, 確保struct的lifetime不超過fields的lifetime.
對這種struct實做methods時要在impl後加上\<'a\>
4. life time elision rules: compiler內建的patterns, 如果套用後reference沒有ambiguous lifetime,
就可以不用聲明life time annotation, 這個規則套用到fn definitions和impl blocks
    - Rule 1: (for input lifetimes)對每個reference parameter指定一個lifetime parameter
    - Rule 2: (for output lifetimes)如果只有一個input lifetime parameter,
那麼所有的output lifetime parameters(return values的lifetime)都等於此input lifetime parameter
    - Rule 3: (for output lifetimes)如果有多個input lifetime parameters, 且其中之一是&self或& mut self
那麼所有的output lifetime parameters都等於self的lifetime
5. static lifetime(life time as long as the program): 'static.
所有的string literals都是'static lifetime, 因為這些string literals存在於program binary中
6. lifetime annotation, generic type parameters和trait bounds的組合
```rust
fn longest_with_an_announcement<'a, T>(
    x: &'a str,
    y: &'a str,
    ann: T,
) -> &'a str
where
    T: Display, {
    ...
}
```

---

## [Chapter 12] An I/O Project: Building a Command Line Program

### [12.1] Accepting Command Line Arguments
1. command line arguments iterator: `std::env::args()`
2. `collect()`需要annotate回傳的collection型別
```rust
let args_1: Vec<String> = env::args().collect();
// or using turbofish
let args_2 = env::args().collect::<Vec<i32>>();
```

### [12.2] Reading a File
1. 將檔案內容讀至String: `std::fs::read_to_string()`

### [12.3] Refactoring to Improve Modularity and Error Handling
1. Separation of concerns for binary projects:
   - main.rs: 只包含如何運行程式的邏輯
   - lib.rs: 提供程式運行的邏輯, 可以對每個功能撰寫測試
2. `Result<T, E>`的`unwrap_or_else(F)`method: `Ok`回傳T, `Err`執行closure F
3. `if let`的使用方式

### [12.4] Developing the Library’s Functionality with Test-Driven Development
1. Test-driven development(TDD): 一種軟體開發模式, 先撰寫功能測試再開始寫code實作
2. 字串裡backslash的作用是接著的換行字元不會成為字串的開頭
```rust
let contents = "\
Rust:
safe, fast, productive.
Pick three.";
```
3. `str`的`lines()`method回傳line-by-line的iterator

### [12.5] Working with Environment Variables
1. `str`的`to_lowercase()`method回傳型別是`String`
2. 存取環境變數: `std::env::var(key)`

### [12.6] Writing Error Messages to Standard Error Instead of Standard Output
1. `println!`輸出至standard output stream, `eprintln!`輸出至standard error stream

---

## [Chapter 13] Functional Language Features: Iterators and Closures
functional programming的形式:
- 把function當做參數傳入function
- function的回傳值為function
- 用變數儲存function

### [13.1] Closures: Anonymous Functions that Capture Their Environment
1. closures是anonymous functions, 可以儲存在變數或是直接當做參數傳遞給functions
2. closures可以capture定義closures區塊的變數, 根據capture的方式, closures自動實作了以下的traits
    - FnOnce: closures只能被呼叫一次, capture變數是採用move的方式
    - FnMut: closures可以被呼叫多次, capture變數是採用mutable reference的方式
    - Fn: closures可以被同時呼叫多次, capture變數是採用unmutable reference的方式或是沒有capture變數
3. FnOnce是FnMut的superset, FnMut是Fn的superset. 換句話說, 實作Fn的closures, 也自動實作了FnMut和FnOnce;
實作FnMute的closures, 也自動實作了FnOnce.
4. function和closure的語法比較:
```rust
fn  add_one_v1   (x: u32) -> u32 { x + 1 }
// closure with type annotations
let add_one_v2 = |x: u32| -> u32 { x + 1 };
let add_one_v3 = |x|             { x + 1 };
// only one expression, brackets are optional
let add_one_v4 = |x|               x + 1  ;
```
5. 如果closures定義沒有type annotations, 第一次呼叫時才會推導出參數和回傳值的型別,
之後的呼叫就會限定參數和回傳值的型別
```rust
let example_closure = |x| x;
// x is inferred as String
let s = example_closure(String::from("hello"));
// error, 5 is not a String
let n = example_closure(5);
```
6. 在closures的`||`前加`move` keyword, 可以強制變數是以capture by move的方式執行
7. 範例使用的二個method
    - FnOnce: `Option<T>`的`unwrap_or_else`
    - FnMut: `Vec<T>`的`sort_by_key`

### [13.2] Processing a Series of Items with Iterators
1. iterators在沒有呼叫consuming methods時(ex: `next()`或間接呼叫`next()`的consuming adaptors), 是沒有任何作用的
2. iterators實作`Iterator` trait, 至少需提供`Item` type和`next` method
```rust
pub trait Iterator {
    type Item;

    fn next(&mut self) -> Option<Self::Item>;

    // methods with default implementations elided
}
```
3. Iterator trait也提供了iterator adaptors(ex: `map`, `filter`)將原本的iterator轉變成另一種iterator
4. 從collection建立iterator的三種method: `into_iter()`, `iter()`, `iter_mut()`

### [13.3] Improving Our I/O Project
1. functional programming可以減少mutable state的數量並提供未來平行處理的可能

### [13.4] Comparing Performance: Loops vs. Iterators
1. iterators提供了high level的表達方式也能有low level具有的效能(zero-cost abstraction)

---

## [Chapter 15] Smart Pointers

### [15.1] Using Box\<T\> to Point to Data on the Heap
1. 使用Box的時機點:
   - compile time無法確定size的type可以藉由pointer封裝後鑲嵌在struct, 因為pointer的size是固定的
   - 大量資料的ownership移轉可以簡化成pointer的移轉
   - trait object
2. data allocation on heap: `Box::new()`
3. enum佔的空間大小由裡頭佔最大空間的元素決定
4. Box實做了Deref trait和Drop trait
   - Deref trait: 讓Box可以像reference一樣使用
   - Drop trait: 在Box deallocate時, clean up指向的heap data

### [15.2] Treating Smart Pointers Like Regular References with the Deref Trait
1. reference是一種形式的pointer, 利用dereference operator`*`可以存取reference指向的value
2. 實做Deref trait等同於實做dereference operator \*
```rust
struct MyBox<T>(T);
impl<T> Deref for MyBox<T> {
    // 須定義associated type
    type Target = T;
    // 須實做deref method
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
```
```rust
let x = 5;
let y = MyBox::new(x);
// *y會自動轉成*(y.deref())
assert_eq!(5, *y);
```
3. Deref coercion發生在functions or methods的reference arguments, arguments的type有實做Deref trait
```rust
fn hello(name: &str) {
    println!("Hello, {name}!");
}
let m = MyBox::new(String::from("Rust"));
// 用了二次Deref coercion
// &MyBox<String> => &String => &str
hello(&m);
```
4. 三種Deref coercion rules:
   - from `&T` to `&U` when `T: Deref<Target=U>`
   - from `&mut T` to `&mut U` when `T: DerefMut<Target=U>`
   - from `&mut T` to `&U` when `T: Deref<Target=U>`
5. 為什麼mutable reference可以coerce成immutable reference?

   根據borrowing rules, 只會有一個mutable reference存在, 所以轉成immutable reference不會違反borrowing rules;
但是反過來就不行, 因為你無法確定只有一個immutable reference

### [15.3] Running Code on Cleanup with the Drop Trait
1. 實做Drop trait等同於提供customized destructor
```rust
pub trait Drop {
    // Required method
    fn drop(&mut self);
}
```
2. 如果要在out of scope前使value釋放其管理的resources(ex. lock), 必須使用`std::mem::drop`,
因為drop method無法直接呼叫

### [15.4] Rc\<T\>, the Reference Counted Smart Pointer
1. `Rc<T>`: 具有reference count的smart pointer, 當strong reference count變成0時才會釋放data
2. `Rc<T>`的methods:
    - `clone`: 增加strong reference count
    - `strong_count`: 回傳目前的strong reference count
    - `weak_count`: 回傳目前的weak reference count

### [15.5] RefCell\<T\> and the Interior Mutability Pattern
1. interior mutability pattern: 透過immutable reference去修改reference到的data. 違反compile time
的borrow checking, 所以是利用runtime的borrow checking來達成.
2. smart pointers的比較:

    |                 |               Box\<T\>            |           Rc\<T\>         |          RefCell\<T\>        |
    |-----------------|:---------------------------------:|:-------------------------:|:----------------------------:|
    | Ownership       | single                            | multiple                  | single                       |
    | Borrow checking | immutable/mutable<br>compile time | immutable<br>compile time | immutable/mutable<br>runtime |
    | Multithreaded   | ?                                 | no                        | no                           |

3. `RefCell<T>`的methods:
    - `borrow`回傳`Ref<T>`
    - `borrow_mut`回傳`RefMut<T>`

### [15.6] Reference Cycles Can Leak Memory
1. Rust不保證不會有memory leak, 只保證memory safe
2. `Weak<T>`: 不具有ownership的weak reference
    - `Rc::downgrade`回傳`Weak<T>`
    - `Weak<T>`的method `upgrade`回傳`Option<Rc<T>>`, 如果是None表示該`Rc<T>`已消滅

---

## [Chapter 17] Object-Oriented Programming Features of Rust

### [17.1] Characteristics of Object-Oriented Languages
1. OOP的幾個面向:
   - objects = data + methods
     - Rust支援(`struct`和`enum`內含data, `impl`區塊對`struct`和`enum`提供methods)
   - encapsulation
     - Rust支援(pub關鍵字)
   - inheritance
     - Rust不支援
2. 使用inheritance的二個理由:
   - parent type實做了methods, child type可以直接使用或override
     - Rust提供的近似做法是default trait method implementation, default implementation也可以override
   - polymorphism: 可以在parent type出現的地方直接用child type取代
     - Rust提供的近似做法是trait objects

### [17.2] Using Trait Objects That Allow for Values of Different Types
1. 雖然enum可以用來儲存多種型別, 但這些型別已經在編譯時決定, 無法之後再擴充, 例如:
```rust
enum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}
```
   如果需要動態擴充型別, 須改用trait object
2. trait object包含了二個pointer資訊
   - 實作trait的型別實體
   - 用來查詢型別實作的trait methods的table
3. trait object: `Box<dyn T>`, `&dyn T`(`T` is the trait name), 例如:
```rust
pub trait Draw {
    fn draw(&self);
}
pub struct Screen {
    pub components: Vec<Box<dyn Draw>>,
}
```
3. static dispatch和dynamic dispatch的差別:
   - static dispatch for generics: 編譯時就根據呼叫時的concrete type直接產生non generic的function/method實作
   - dynamic dispatch for trait object: 編譯時無法決定要呼叫的method, 和static dispatch相比有效能損失

### [17.3] Implementing an Object-Oriented Design Pattern
1. state pattern: 一個value有多種states, 將每種state都用一個object表示, value的state轉換透過state object完成
2. `struct Post`的state field要用`Option`包裝的原因是state field在進行ownership的轉移時, Rust不允許struct field沒有值
(產生cannot move out of borrowed content的錯誤)
3. `trait State`的methods第一個參數不是常見的self, &self, &mut self, 而是`self: Box<Self>`, 限定了只有
Box包裝後的型別才可以呼叫這些methods
4. Rust可以透過trait object實現object-oriented design pattern的state pattern, 但是將state特性嵌入type的變形
state pattern更符合Rust的精神