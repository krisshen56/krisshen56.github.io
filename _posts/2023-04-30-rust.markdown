---
layout: post
title:  "Notes on The Rust Programming Language"
date:   2023-04-30 18:00:00 +0800
categories: rust
---
### [Chapter 6] Enums and Pattern Matching

#### [6.1] Defining an Enum
1. enum definition and its usage
```rust
enum IpAddrKind {
    V4,
    V6,
}
fn route(ip_kind: IpAddrKind) {}
route(IpAddrKind::V4);
```
2. enum with associated data
```rust
enum IpAddr {
    V4(u8, u8, u8, u8),
    V6(String),
}
let home = IpAddr::V4(127, 0, 0, 1);
let loopback = IpAddr::V6(String::from("::1"));
```

---

## [Chapter 10] Generic Types, Traits, and Lifetimes
x, y都是`&i32`, x op y(op是relative operator == > <)不是比較address, 而是比較reference的值,
只有符合std::cmp::PartialOrd的type才支援

#### [10.1] Generic Data Types
1. generic可以用在function, struct, enum, \<\>要放在這些entity的名字之後
```rust
// function
fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> &T
// struct
struct Point<T, U> {
    x: T,
    y: U,
}
// enum
enum Result<T, E> {
    Ok(T),
    Err(E),
}
```

2. 對generic struct/enum實作method(XXX is the name of struct/enum's)
```rust
impl<T> XXX<T> {
}
```
也可以只對某種T提供method(類似C++的partial specialization)
```rust
impl XXX<f32>{
}
```
3. generic struct也可以有generic method
```rust
impl<X1, Y1> Point<X1, Y1> {
    fn mixup<X2, Y2>(self, other: Point<X2, Y2>) -> Point<X1, Y2> {
        ...
    }
}
```
4. monomorphization等於c++ template instantiation

#### [10.2] Traits: Defining Shared Behavior
1. trait定義了type須提供的methods, 類似其他語言的interface
```rust
pub trait Summary {
    fn summarize(&self) -> String;
}
```
2. implement trait for type
```rust
impl Summary for NewsArticle {
    ...
}
```
3. Orphan rule: 對type實做trait有一限制, trait或type必須至少有一個是定義在local crate,
二者都在external crate是不允許的
4. trait可以有default implementation, 要使用default implementation的type要在impl block提供empty block
```rust
pub trait Summary {
    // provide default implementation
    fn summarize(&self) -> String {
        String::from("(Read more...)")
    }
}
// use default implementation
impl Summary for NewsArticle {}
```
overriding default implementation的方式則是直接實做trait的methods(但是overriding
implementation無法呼叫default implementation)
5. 限定item只能是有實做Summary的type
```rust
pub fn notify(item: &impl Summary) {
    ...
}
```
等同於下面的trait bound語法
```rust
pub fn notify<T: Summary>(item: &T) {
    ...
}
```
6. 多個trait bounds要用+串接, 也可以在return type後, brace前使用where語句限定trait bounds
```rust
pub fn notify(item: &(impl Display + Summary)) {
pub fn notify<T: Display + Summary>(item: &T) {
pub fn notify<T>(item: &T) -> ()
        where T: Display + Summary, {
```
7. trait bound也可以限定return type, 但function內的所有回傳型別必須是唯一的
(否則須用trait object)
```rust
fn returns_summarizable() -> impl Summary {
    ...
}
```
8. trait bound可以限制符合條件的generic types才實做那些methods
```rust
impl<T: Display + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        ...
    }
}
```
9. blanket implmentation: 利用trait bound限定generic type實做trait
```rust
impl<T: Display> ToString for T {
    ...
}
```

---

## [Chapter 12] An I/O Project: Building a Command Line Program

### [12.1] Accepting Command Line Arguments
1. command line arguments iterator: `std::env::args()`
2. `collect()`需要annotate回傳的collection型別
```rust
let args_1: Vec<String> = env::args().collect();
// or using turbofish
let args_2 = env::args().collect::<Vec<i32>>();
```

### [12.2] Reading a File
1. 將檔案內容讀至String: `std::fs::read_to_string()`

### [12.3] Refactoring to Improve Modularity and Error Handling
1. Separation of concerns for binary projects:
   - main.rs: 只包含如何運行程式的邏輯
   - lib.rs: 提供程式運行的邏輯, 可以對每個功能撰寫測試
2. `Result<T, E>`的`unwrap_or_else(F)`method: `Ok`回傳T, `Err`執行closure F
3. `if let`的使用方式

### [12.4] Developing the Library’s Functionality with Test-Driven Development
1. Test-driven development(TDD): 一種軟體開發模式, 先撰寫功能測試再開始寫code實作
2. 字串裡backslash的作用是接著的換行字元不會成為字串的開頭
```rust
let contents = "\
Rust:
safe, fast, productive.
Pick three.";
```
3. `str`的`lines()`method回傳line-by-line的iterator

### [12.5] Working with Environment Variables
1. `str`的`to_lowercase()`method回傳型別是`String`
2. 存取環境變數: `std::env::var(key)`

### [12.6] Writing Error Messages to Standard Error Instead of Standard Output
1. `println!`輸出至standard output stream, `eprintln!`輸出至standard error stream

---

## [Chapter 13] Functional Language Features: Iterators and Closures
functional programming的形式:
- 把function當做參數傳入function
- function的回傳值為function
- 用變數儲存function

### [13.1] Closures: Anonymous Functions that Capture Their Environment
1. closures是anonymous functions, 可以儲存在變數或是直接當做參數傳遞給functions
2. closures可以capture定義closures區塊的變數, 根據capture的方式, closures自動實作了以下的traits
    - FnOnce: closures只能被呼叫一次, capture變數是採用move的方式
    - FnMut: closures可以被呼叫多次, capture變數是採用mutable reference的方式
    - Fn: closures可以被同時呼叫多次, capture變數是採用unmutable reference的方式或是沒有capture變數
3. FnOnce是FnMut的superset, FnMut是Fn的superset. 換句話說, 實作Fn的closures, 也自動實作了FnMut和FnOnce;
實作FnMute的closures, 也自動實作了FnOnce.
4. function和closure的語法比較:
```rust
fn  add_one_v1   (x: u32) -> u32 { x + 1 }
// closure with type annotations
let add_one_v2 = |x: u32| -> u32 { x + 1 };
let add_one_v3 = |x|             { x + 1 };
// only one expression, brackets are optional
let add_one_v4 = |x|               x + 1  ;
```
5. 如果closures定義沒有type annotations, 第一次呼叫時才會推導出參數和回傳值的型別,
之後的呼叫就會限定參數和回傳值的型別
```rust
let example_closure = |x| x;
// x is inferred as String
let s = example_closure(String::from("hello"));
// error, 5 is not a String
let n = example_closure(5);
```
6. 在closures的`||`前加`move` keyword, 可以強制變數是以capture by move的方式執行
7. 範例使用的二個method
    - FnOnce: `Option<T>`的`unwrap_or_else`
    - FnMut: `Vec<T>`的`sort_by_key`

### [13.2] Processing a Series of Items with Iterators
1. iterators在沒有呼叫consuming methods時(ex: `next()`或間接呼叫`next()`的consuming adaptors), 是沒有任何作用的
2. iterators實作`Iterator` trait, 至少需提供`Item` type和`next` method
```rust
pub trait Iterator {
    type Item;

    fn next(&mut self) -> Option<Self::Item>;

    // methods with default implementations elided
}
```
3. Iterator trait也提供了iterator adaptors(ex: `map`, `filter`)將原本的iterator轉變成另一種iterator
4. 從collection建立iterator的三種method: `into_iter()`, `iter()`, `iter_mut()`

### [13.3] Improving Our I/O Project
1. functional programming可以減少mutable state的數量並提供未來平行處理的可能

### [13.4] Comparing Performance: Loops vs. Iterators
1. iterators提供了high level的表達方式也能有low level具有的效能(zero-cost abstraction)

---

## [Chapter 15] Smart Pointers

---

## [Chapter 17] Object-Oriented Programming Features of Rust

### [17.1] Characteristics of Object-Oriented Languages
1. OOP的幾個面向
   - object = data + methods => Rust支援
   - encapsulation => Rust支援
   - inheritance => Rust不支援
2. Rust支援default trait method implementation, 也可以override此default implementation
3. Rust支援的多型
   - Bounded parametric polymorphism: generics + trait bounds
   - trait objects

### [17.2] Using Trait Objects That Allow for Values of Different Types
1. trait object: Box<dyn T>, &dyn T(T is the trait name)
2. trait object是dynamic dispatch, 和static dispatch相比有效能損失

### [17.3] Implementing an Object-Oriented Design Pattern
1. 利用trait object實作state pattern
2. impl block裡的method, 第一個參數可以是self, &self, &mut self外, 也可以是Box<self>...
(coercion特性)
3. 利用Rust的特性, 改變思考方式, 把state特性嵌入type, 實作變形的state pattern