---
layout: post
title:  "Notes on The Go Programming Language"
date:   2019-02-16 22:00:00 +0800
categories: golang
---
這本書是2017年去天津出差時在書局看到便宜的英文版就帶回來了, 紙質當然比不上Pearson的版本, 不過內容一樣就不用計較這些了.

工欲善其事, 必先利其器. 要學習golang, 首先要裝好go tool和好用的vim plugin "vim-go".

#### Installing go tool
在golang[官網](https://golang.org/dl/)下載後解壓至/usr/local就完成了.
```bash
sudo tar -C /usr/local -xzf go1.11.5.linux-amd64.tar.gz
```

#### vim-go commands
vim-go其實算是一個懶人包的plugin, 它集合了各種golang的小工具, 所以第一次使用前要先安裝這些小工具.
`:GoInstallBinaries`會從網路下載小工具的source code至GOPATH, 並將其編譯成binary供之後使用.

---

### Chapter 1 Tutorial
本書作者之一的Kernighan也是The C Programming Language的作者, 所以第一章的風格就如同K&R C一樣,
快速將golang介紹一遍, 讓人可以很快上手.

#### [1.1] Hello, World
golang程式碼的架構由上至下可以分成三部份:
- package declarations
- import declarations
- other declarations(functions, variables, consts, types...)

屬於同一個package的source code都放在同一個資料夾. main是一個特殊的package name,
表示此package會組成一個獨立的執行檔, 而不是函式庫.

本節提到的一些go tool使用, 其vim-go的對照如下:
- go run    => `:GoRun`
- gofmt     => `:GoFmt`
- goimports => `:GoImports`

#### [1.2] Command-Line Arguments
slice s的表達式: s[m:n], 0 <= m <= n <= len(s), 其中m和n都可以省略, 省略的話m = 0, n = len(s).

和C/C++不一樣, golang只有i++, i--, 沒有++i, --i.

golang只有一種loop construct *for*, 其語法如下, 每一部分都可以省略:
```go
for initialization; condition; post {
    ...
}

// the while equivalent
for condition {
    ...
}
```
當然golang也支援range based的for loop:
```go
// i is index, v is os.Args[i]
for i, v := range os.Args[1:] {
    ...
}
```
`_`在golang稱為blank identifier, 通常當做temp variable使用, 因為golang不允許unused variables.

#### [1.3] Finding Duplicate Lines
golang的else必須緊接在`}`之後, 不可以成為一行的開頭.
```go
if condition {
    ...
} else {
    ...
}
```
---

### Chapter 2 Program Structure

#### [2.1] Names
golang的命名格式是camel case(ex. parseRequestLine), 縮寫的名詞則是全部大寫或全部小寫(ex. escapeHTML).

#### [2.3]Variable
1. 變數的宣告方式如下:
```go
var name type = expression
```
- 可以省略type, 其type由expression決定
- 可以省略expression, 其值為此type的0值, 所以golang沒有uninitialized variable的問題.
  interfaces和reference type(slice, pointer, map, channel, function)的0值為nil
2. 如果變數有初始值且不是package level變數, 可以用以下方式宣告並賦值
name := expression
要注意的是, 此種宣告方式不代表會宣告所有的變數, 如果其中變數之前有宣告過
, 那等同於assignment, 但最少要有一個新變數宣告才不會有compile error
    ```go
    in, err := os.Open(inFile)
    out, err := os.Open(outFile)
    ```
3. Pointer型態的type宣告是\*type(從左往右的方式去指定pointer, array和type
, 剛好可以用英文去描述)
4. 在function中return local變數的位址是合法的, 以下二個例子作用相同
   ```go
   func newInt() *int {
       return new(int)
   }
   func newInt() *int {
       var dummy int
       return &dummy
   }
   ```
5. function中變數的來源是heap或stack, 由escape from function與否決定. 使用new
不代表變數就來自heap, 而是看其在離開function後, 是否仍有方式可以被reference到. 一般來說,
escape variable會有額外的memory開銷

#### [2.4] Assignments
tuple assignment會先evaluate右邊的expression再賦值給左邊的expression.
```go
// swap values of x, y easily
x, y = y, x
```

#### [2.5] Type Declarations
語法是`type name underlying-type`, 支援的運算元由underlying type決定,
可以與underlying type的運算子做運算, 但是不同type即使underlying type相同也不可做運算.

T(x)表示將x轉型成type T, 條件是x和T具有相同的underlying type

#### [2.6] Packages and Files
import path代表了package存放的資料夾位置, *import "gopl.io/ch2/tempconv"*表示package tempconv
存放在GOPATH/src/gopl.io/ch2/tempconv.

在package裡, 首字大寫的names是exported的, 可以被其它外部的package引用.

golang不允許unused package被import, 因此可以利用`:GoImports`去自動管理import packages的增減.

init function只能用來做package initialization, 無法被呼叫或引用.
```go
// package initialization for package level variables
func init() {
    ...
}
```

gopl.io/ch2/popcount中的init function所做的事是預先計算0~255的population count, 原理是N和1
先做bit and得到LSB的popcount, 再將N向右shift 1個bit, 剩下的popcount剛好是之前計算過的N/2的popcount.

---

### Chapter 4 Composite Types

#### [4.1] Arrays
golang的array可以使用array literal進行初始化
```go
var p [3]int = [3]int{1, 2, 3}
// ... means the size of array determined by initializer list
q := [...]int{1, 2, 3, 4}
// array of 100 ints, the value of each element is 0 except r[99] = -1
r := [...]int{99: -1}
```
如果二個array的size和element type相同, 可以使用==和!=做element-wise比較.

---

### Chapter 10 Packages and the Go Tool

#### [10.4] Import Declarations
multiple imports通常都以下面方式呈現:
```go
import (
    "fmt"
    "os"
)
//
// which is equivalent to:
// import "fmt"
// import "os"
//
```
renaming import可以避免不同import path但是同package name造成的conflicts
```go
import (
    "crypto/rand"
    mrand "math/rand"
)
```

#### [10.7] The Go Tool
go env會列出golang相關的環境變數, 重要的環境變數有GOPATH(workspace目錄), GOROOT(golang安裝目錄),
GOOS和GOARCH(cross compiling會用到).

- `go run`: 執行完後什麼東西都不保留
- `go build`: 只保留執行檔, 但捨棄依賴的packages產出
- `go install`: 相較於`go build`會保留packages在$GOPATH/pkg

`go build`的package參數可以使用import path或是relative path, 但是使用relative path時前面一定要有`.`或`..`.

internal package是import path中有internal的路徑名稱, 只能被某些packages import.
ex: *net/http/internal/chunked*能被*net/http*或是*net/http/httputil* import.
